# プロジェクト納品自動化ツール 設計書

## 1. 概要

本ツールは、`Microsoft Teams` のローカルドライブに存在するプロジェクト成果物の中から、指定されたファイルを抽出し、納品時に必要な標準フォルダ構造を自動生成し、そこにファイルをコピーするCUIツールです。Pythonで開発し、新人エンジニアが開発しやすいよう、機能を限定しシンプルさを追求します。

## 2. 目的

*   `Teams` から納品物へのファイル抽出・コピー作業の効率化
*   納品フォルダ構造の標準化
*   新人エンジニアの開発スキル向上

## 3. 動作環境

*   **OS**: Windows 10/11
*   **Python**: 3.8以上
*   **開発環境**: VS Code (推奨)

## 4. 機能要件

### 4.1. 納品用フォルダ構造生成機能 (必須)

*   **機能概要**: 指定されたプロジェクト名、アイテム名に基づき、納品用の標準フォルダ構造を自動生成します。
*   **生成構造**: `[納品先ルート]\[年度]\[四半期]\[プロジェクト名]\[アイテム名]\[工程フォルダ]\[成果物フォルダ]`
*   **決定事項**:
    *   **年度・四半期**: ツール実行時の西暦年と、実行月の四半期（Q1: 1-3月, Q2: 4-6月, Q3: 7-9月, Q4: 10-12月）を自動で判別し、フォルダ名として使用します。ユーザーによる指定は不要とします。
    *   **工程フォルダ・成果物フォルダ**: 以下のマッピング情報をコード内にハードコーディングします。最初は固定とし、拡張性が必要になった場合は設定ファイル化を検討します。
        *   **例**:
            *   `要件定義`: `要求仕様書`, `要件定義書`
            *   `設計`: `基本設計書`, `詳細設計書`
            *   `テスト`: `テスト計画書`, `テスト仕様書`, `テスト報告書`
            *   `運用`: `運用手順書`, `保守マニュアル`
            *   ※マッピングはプロジェクトで利用するものに限定し、必要最小限に絞る。

### 4.2. ファイル抽出・コピー機能 (必須)

*   **機能概要**: `Microsoft Teams` ローカルドライブの指定されたパスから、指定されたファイル名パターンに合致するファイルを抽出し、生成された納品用フォルダ構造の適切な位置にコピーします。
*   **決定事項**:
    *   **抽出対象ファイル名の指定**: `*` を含む部分一致（ワイルドカード）を許容します。例: `*設計書*.docx`
    *   **複数ファイル名の指定**: 1回の実行につき、**1つのファイル名パターンのみ** を指定できるものとします。複数のファイル種類をコピーしたい場合は、ツールを複数回実行します。
    *   **探索範囲**: `Teams` ローカルパスとして指定されたルートディレクトリ配下の**全階層**を探索します。
    *   **コピー先判定**: 抽出されたファイル名に基づき、上記の「工程フォルダ・成果物フォルダ」マッピングに合致するフォルダ（例: ファイル名に「要求仕様書」が含まれていれば「要求仕様書」フォルダ）にコピーします。合致するフォルダが複数ある場合は、最初の合致先にコピーします。合致するフォルダがない場合は、標準出力に警告メッセージを出力し、コピーは行いません。
    *   **同名ファイル**: コピー先に同名のファイルが存在する場合は、**上書き**します。

## 5. 非機能要件

### 5.1. ユーザビリティ

*   **インターフェース**: コマンドラインインターフェース (CUI) とします。
*   **引数**: 必要な情報は全てコマンドライン引数で受け取ります。
*   **メッセージ**: 処理の進捗状況、成功/失敗、エラー内容などを標準出力に分かりやすく表示します。

### 5.2. エラーハンドリング

*   **ファイル/フォルダ操作エラー**: ファイルが見つからない、コピーに失敗したなどのエラーが発生した場合は、その旨を標準出力に表示し、**処理を中断せず、可能な限り次のファイル/フォルダの処理へ進みます**。
*   **入力値エラー**: コマンドライン引数の不足や不正な値の場合は、エラーメッセージを表示し、ツールを終了します。

### 5.3. ロギング

*   **標準出力**: 処理の成功/失敗に関わらず、コピーしたファイル名、コピー元パス、コピー先パスを標準出力に出力します。
*   **ログファイル**: 今回はログファイルの出力は行いません。必要になった際に検討します。

### 5.4. 保守性

*   **コードコメント**: 新人でも理解しやすいよう、関数や主要な処理ブロックには詳細なコメントを記述します。
*   **`README.md`**: ツールの概要、実行方法、コマンドライン引数の説明をMarkdown形式で記述します。

## 6. コマンドライン引数 (CLI) 仕様

ツールは以下の形式で実行するものとします。

```bash
python main.py <teams_root_path> <delivery_root_path> <project_name> <item_name> <file_pattern>
```

*   `<teams_root_path>` (必須): `Microsoft Teams` がマウントされているローカルドライブのルートパス。
    *   例: `"T:\Teams\プロジェクトX"`
*   `<delivery_root_path>` (必須): 納品物を配置するルートパス。
    *   例: `"D:\納品物"`
*   `<project_name>` (必須): プロジェクト名。
    *   例: `PJT_A`
*   `<item_name>` (必須): アイテム名（フェーズ名など）。
    *   例: `Phase1_Design`
*   `<file_pattern>` (必須): 抽出対象のファイル名パターン (ワイルドカード `*` 使用可能)。
    *   例: `"*要件定義書*.docx"`

**実行例**:

```bash
python main.py "T:\Teams\プロジェクトA" "D:\納品物" PJT_A Phase1_Design "*要件定義書*.docx"
```

## 7. 内部設計

### 7.1. モジュール構成

```
.
├── main.py               # メイン処理 (引数解析、各モジュール呼び出し)
├── folder_creator.py     # フォルダ生成関連モジュール
├── file_processor.py     # ファイル抽出・コピー関連モジュール
└── config.py             # 定数、マッピング情報などを定義
```

### 7.2. クラス/関数設計

#### `main.py`

*   `main()` 関数:
    *   コマンドライン引数を解析する。
    *   引数チェックを行い、不正な場合はエラーメッセージを表示して終了。
    *   `folder_creator` モジュールを呼び出し、納品用フォルダ構造を生成する。
    *   `file_processor` モジュールを呼び出し、ファイルの抽出とコピーを実行する。
    *   処理結果を標準出力に表示する。

#### `config.py`

*   `DELIVERY_FOLDER_MAPPING` (定数): 工程フォルダと成果物フォルダのマッピングを辞書形式で定義。
    ```python
    DELIVERY_FOLDER_MAPPING = {
        "要件定義": ["要求仕様書", "要件定義書"],
        "設計": ["基本設計書", "詳細設計書"],
        # ... 他の工程と成果物
    }
    ```
*   `get_quarter(month)` 関数: 月から四半期文字列 (例: `Q1`) を返す。

#### `folder_creator.py`

*   `create_delivery_folders(delivery_root, project_name, item_name)` 関数:
    *   **引数**: `delivery_root` (str), `project_name` (str), `item_name` (str)
    *   **戻り値**: 生成されたルートフォルダのパス (str)
    *   **処理内容**:
        *   現在の年度と四半期を取得 (`config.get_quarter` を利用)。
        *   `delivery_root` 配下に `[年度]\[四半期]\[project_name]\[item_name]` までのパスを生成。
        *   `config.DELIVERY_FOLDER_MAPPING` を参照し、各工程フォルダ、成果物フォルダを生成。
        *   `os.makedirs(path, exist_ok=True)` を使用して、既に存在する場合はエラーにならないようにする。
        *   生成されたルートパスを返す。

#### `file_processor.py`

*   `process_files(teams_root, delivery_base_path, file_pattern)` 関数:
    *   **引数**: `teams_root` (str), `delivery_base_path` (str), `file_pattern` (str)
    *   **戻り値**: なし (処理結果は標準出力に表示)
    *   **処理内容**:
        *   `os.walk(teams_root)` を使用して、`teams_root` 配下の全てのファイルとフォルダを探索する。
        *   各ファイルについて、`fnmatch.fnmatch(filename, file_pattern)` を使用して、`file_pattern` に合致するかを判定する。
        *   合致したファイルについて:
            *   ファイル名から、`config.DELIVERY_FOLDER_MAPPING` を参照し、コピー先の成果物フォルダを特定する。
                *   **例**: `詳細設計書_v1.0.docx` → `設計` -> `詳細設計書` フォルダ
            *   適切なコピー先フォルダが見つからない場合は、標準出力に警告メッセージを出力し、コピーは行わない。
            *   コピー先パスを構築し、`shutil.copy2(source_path, destination_path)` を使用してファイルをコピーする。
            *   コピー元とコピー先のパスを標準出力に表示する。
        *   処理中に発生したファイル操作エラーはキャッチし、エラーメッセージを標準出力に表示するが、処理は継続する。

## 8. テスト方針

### 8.1. 手動テスト

*   **仮想フォルダの準備**:
    *   `Teams` のローカルパスを模したダミーのフォルダ構造とダミーファイルをいくつか作成します。
    *   納品先パスとして、空のフォルダを作成します。
*   **テストシナリオ**:
    *   **正常系**: 全ての引数を正しく指定し、期待通りにフォルダが生成され、ファイルがコピーされることを確認。
    *   **異常系**:
        *   引数不足、不正な引数を指定した場合に、適切なエラーメッセージが表示されることを確認。
        *   `Teams` パスが存在しない場合に、エラーメッセージが表示されることを確認。
        *   抽出対象ファイルが見つからない場合に、警告メッセージが表示されることを確認（コピーは行われない）。
        *   コピー先に同名ファイルが存在する場合に、正しく上書きされることを確認。
        *   ファイル名が`DELIVERY_FOLDER_MAPPING`に合致しない場合に、コピーされないことを確認。

### 8.2. (将来的な検討) 単体テスト

*   Pythonの `unittest` モジュールなどを利用し、各関数の独立したテストコードを作成します。
*   特に `get_quarter` 関数、`create_delivery_folders` 関数、`process_files` 関数のファイルパス構築ロジックなどを対象とします。
*   ファイル操作を伴うテストは、`tempfile` モジュールなどを利用して一時ファイル/ディレクトリを作成し、テスト後に削除するようにします。

## 9. 今後の拡張 (今回は実装しない)

*   ログファイルへの出力機能
*   設定ファイルによるマッピング情報の外部化 (INI, YAMLなど)
*   複数のファイルパターン指定への対応
*   ファイルのタイトルチェック、日付チェック、捺印判定機能 (画像認識)